import torch
import json
import gc
import random
from datasets import Dataset
from transformers import (
    AutoTokenizer, AutoModelForCausalLM,
    TrainingArguments, Trainer,
    DataCollatorForLanguageModeling,
    BitsAndBytesConfig
)
from peft import LoraConfig, get_peft_model, TaskType, PeftModel, prepare_model_for_kbit_training
from collections import Counter
import pandas as pd
import os

# === 檢查 CUDA 狀態 ===
print("CUDA 可用:", torch.cuda.is_available())
print("使用中的 GPU:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "無")

# === 基礎模型與量化設定 ===
base_model_path = "./codellama/CodeLlama-7b-hf"
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16,
    bnb_4bit_use_double_quant=True,
    llm_int8_enable_fp32_cpu_offload=True
)

# === 初始化 tokenizer ===
tokenizer = AutoTokenizer.from_pretrained(base_model_path)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# === 讀取資料並分組 ===
with open("training_data.jsonl", "r", encoding="utf-8") as f:
    lines = [json.loads(line) for line in f]

level_datasets = {1: [], 2: [], 3: []}
for item in lines:
    level = item.get("level", 1)
    text = item["prompt"].strip() + "\n\n" + item["completion"].strip() + tokenizer.eos_token
    level_datasets[level].append({"text": text})

# === 資料平衡策略 ===
def balance_dataset(dataset):
    high = [d for d in dataset if "high risk" in d["text"].lower()]
    low = [d for d in dataset if "low risk" in d["text"].lower()]
    min_len = min(len(high), len(low))
    balanced = random.sample(high, min_len) + random.sample(low, min_len)
    random.shuffle(balanced)
    return balanced

# === Tokenizer 函數 ===
def tokenize_function(example):
    result = tokenizer(
        example["text"],
        padding="max_length",
        truncation=True,
        max_length=256,
    )
    result["labels"] = result["input_ids"].copy()
    return result

# === Data Collator ===
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

# === LoRA 設定 ===
lora_config = LoraConfig(
    r=8,
    lora_alpha=32,
    lora_dropout=0.1,
    target_modules=["q_proj", "v_proj"],
    task_type=TaskType.CAUSAL_LM,
)

# === 微調函數 ===
def train_one_stage(level, previous_lora_path=None, replay_data=[]):
    print(f"\n=== 開始訓練 Level {level} 資料 ===")

    # 合併 replay 資料
    raw_dataset = level_datasets[level] + replay_data
    balanced_dataset = balance_dataset(raw_dataset)

    raw_dataset = Dataset.from_list(balanced_dataset)
    tokenized_dataset = raw_dataset.map(tokenize_function, batched=True)
    tokenized_dataset = tokenized_dataset.train_test_split(test_size=0.1, seed=42)
    train_dataset = tokenized_dataset["train"]
    eval_dataset = tokenized_dataset["test"]
    
    # === 統計訓練資料分佈 ===
    def count_labels(dataset):
        labels = []
        for d in dataset:
            decoded = tokenizer.decode(d["input_ids"], skip_special_tokens=True).lower()
            if "high risk" in decoded:
                labels.append("High")
            elif "low risk" in decoded:
                labels.append("Low")
        return Counter(labels)

    # 統計
    train_counts = count_labels(train_dataset)
    eval_counts = count_labels(eval_dataset)
    
    stats = {
        "Level": level,
        "Train Samples": len(train_dataset),
        "Train High Risk": train_counts.get("High", 0),
        "Train Low Risk": train_counts.get("Low", 0),
        "Eval Samples": len(eval_dataset),
        "Eval High Risk": eval_counts.get("High", 0),
        "Eval Low Risk": eval_counts.get("Low", 0),
        "Total Samples": len(train_dataset) + len(eval_dataset)
    }
    
    # 寫入 CSV
    csv_path = "./training_stats.csv"
    stats_df = pd.DataFrame([stats])
    
    if not os.path.exists(csv_path):
        stats_df.to_csv(csv_path, index=False, encoding="utf-8-sig")
    else:
        stats_df.to_csv(csv_path, mode="a", header=False, index=False, encoding="utf-8-sig")
    
    print(f"✅ Level {level} 的訓練統計已寫入 {csv_path}")

    # 載入 base model
    base_model = AutoModelForCausalLM.from_pretrained(
        base_model_path,
        quantization_config=bnb_config,
        device_map={"": 0},
        torch_dtype=torch.bfloat16,
    )
    base_model.config.use_cache = False
    base_model.gradient_checkpointing_enable()
    base_model = prepare_model_for_kbit_training(base_model)

    # 建立 LoRA 模型
    if previous_lora_path:
        print(f"載入前一階段 LoRA 權重: {previous_lora_path}")
        model = get_peft_model(base_model, lora_config)
        model = PeftModel.from_pretrained(base_model, previous_lora_path, is_trainable=True)
    else:
        model = get_peft_model(base_model, lora_config)

    print("是否有可訓練參數：", any(p.requires_grad for p in model.parameters()))
    model.print_trainable_parameters()

    training_args = TrainingArguments(
        output_dir=f"./results/level_{level}",
        num_train_epochs=3,
        per_device_train_batch_size=1,
        per_device_eval_batch_size=1,
        gradient_accumulation_steps=4,
        warmup_steps=10,
        weight_decay=0.01,
        logging_dir=f"./logs/level_{level}",
        logging_steps=10,
        fp16=True,
        evaluation_strategy="steps",
        eval_steps=50,
        save_strategy="steps",
        save_steps=50,
        load_best_model_at_end=True,
        metric_for_best_model="eval_loss",
        greater_is_better=False,
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=eval_dataset,
        data_collator=data_collator,
    )

    trainer.train()

    save_path = f"./lora_stage_{level}"
    model.save_pretrained(save_path)
    tokenizer.save_pretrained(save_path)
    print(f"已儲存 LoRA 權重與 tokenizer 至 {save_path}")

    del model
    del base_model
    torch.cuda.empty_cache()
    gc.collect()

    # 回傳 20% 當作 replay
    return save_path, random.sample(balanced_dataset, int(0.2 * len(balanced_dataset)))

# === 執行三階段微調（含 Replay） ===
lora_stage_1, replay_1 = train_one_stage(level=1)
lora_stage_2, replay_2 = train_one_stage(level=2, previous_lora_path=lora_stage_1, replay_data=replay_1)
lora_stage_3, _ = train_one_stage(level=3, previous_lora_path=lora_stage_2, replay_data=replay_2)
